#!/usr/bin/env python3
# coding=utf-8
"""
@author: f.l
@time: 2022/5/11
@File: plugin_develop.py

一、包管理：



二、插件化开发。
    运行时，根据用户需求（用户输入，函数注册，提供字符串等），找到模块的资源动态加载起来。
    内建函数`__import__`，可以接收用户输入的字符串，导入对应的模块。`__import__`太原始，一般使用importlib.import_module动态加载模块，支持绝对导入、相对导入。



插件化编程技术：
    不管运行期还是编译期，或者软件启动的时候，我们要把一个组件加载进来。因为开发软件，不可能一次性（给用户交的第一个版本、第二个版本）把所有功能都实现，
    版本通过不断迭代完善功能。所以，可以在用户部署完的某个目录添加新增的功能模块（plugins下增加新的功能模块），用户下次重启的时候自动加载新增的模块。这就是插件化开发。

依赖技术：
反射：运行时获取类型信息，动态维护类型数据
动态import：`__import__`太原始，一般使用importlib模块，实现动态import模块的能力
多线程：可以开启一个线程，等待用户输入，从而动态加载指定名称的模块

加载的时机：
    1、程序启动时：像pycharm这样的工具，依赖的组件非常多，这些组件也可能是插件，启动的时候扫描固定的目录加载插件。
    2、程序运行中：运行过程中，接收用户指令或请求启动相应的插件
    两种方式各有利弊，如果插件过多，会导致程序启动很慢，运行中加载，如果插件太大或依赖过多，插件也会启动很慢。
    所以先加载必须的、常用插件，其他插件需要时动态载入。


应用：
软件的设计不可能尽善尽美，或者在某些功能上，不可能做的专业，需要专业的客户自己增强。例如Notepad++，它只需要做好一个文本编辑器就可以了，其它增强功能都通过插件的方式提供，例如拼写检查、HTML预览、正则插件等。

**要定义规范，定义插件从哪里加载、如何加载、必须实现的功能等。**


接口和插件的区别？
接口(API)是操作，是函数。接口往往是暴露出来的功能，例如模块提供的函数或方法，加载模块后调用这些函数完成功能。接口也是一种规范，它约定了必须实现的功能（必须提供某名称的函数），但是不关心怎么实现这个功能。
所以浏览器的某一个地址，实际上指向的是后台的某一个运行的server里面的某一个模块的某一个类的某一个方法。

插件是把模块加载到系统中，运行它，增强当前系统功能，或者提供系统不具备的功能，往往插件技术应用在框架设计中。系统本身设计简单化、轻量级，实现基本功能后，其他功能通过插件加入进来，方便扩展
例如：定制化需求；销售部门很高兴，旗舰版、专业版、家庭版。。。尊重知识版权，不然以何为生。。。

"""
#  插件化开发核心代码
import importlib


def module_load(module_name: str, sep=':'):
    #  module_name，用户需求，用户需要动态载入的模块里的类
    mod = __import__('exception_handle_01')  # 等价于 import exception_handle_01。使用`__import__`在于可以接收用户输入的字符串
    ret = mod.MyException()
    mod, _, imp_cls = module_name.partition(sep)
    load_module = importlib.import_module(mod)  # 使用importlib.import_module动态加载模块。
    # 注意，不管是动态加载还是编译时加载，被加载过的模块都保存在sys.module中，不会重复载入
    _imp_cls = getattr(load_module, imp_cls)  # 利用反射能力，从模块对象中获取属性
    return _imp_cls


if __name__ == '__main__':
    # 加载插件
    cls = module_load('exception_handle_01', 'MyException')  # 导入的属性可以动态添加的需要加入的模块、类、函数中。通常通过多线性完成。
    print(cls())
